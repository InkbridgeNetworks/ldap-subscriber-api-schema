{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "vzir83tvacnxe"
  },
  "info": {
    "title": "FreeRADIUS generic request/response API",
    "version": "1.0",
    "summary": "An extremely simple request/response API that implements multiple network protocols",
    "description": "This API is intended to be used as the backend for applications which need to send test packets.  This should be a test framework, a client, or something more complex such as a load simulator.",
    "contact": {
      "name": " Network RADIUS support",
      "url": "http://www.networkradius.com",
      "email": "support@networkradius.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/request/{protocol}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/protocol"
        }
      ],
      "post": {
        "summary": "Initiate a new request",
        "operationId": "post-request-protocol",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "integer",
                      "x-stoplight": {
                        "id": "izt71e8cf1imz"
                      },
                      "description": "Returned in asynchronous mode.  The identifier of the request, used for polling."
                    },
                    {
                      "$ref": "#/components/schemas/ResponsePacket",
                      "x-stoplight": {
                        "id": "fz1bd9izm0jwx"
                      },
                      "description": "Returned in synchronous mode.  The response we received"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidRequestResponse"
          },
          "408": {
            "$ref": "#/components/responses/timeoutResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalErrorResponse"
          }
        },
        "description": "Initiate a new request with the given protocol.\n\nThe attributes section of the request may contain any attributes found in the dictionary matching {protocol}.  The fields of the attribute table must match an attribute name in the protocol dictionary.  The values can either be an object (a nested attribute), an array (multiple values), a string matching the format of the attribute e.g. \"127.0.0.1\" for ipv4addr type attributes, an integer (for integer types), a float (for float types), or a boolean.\n\nSee here for all protocol dictionaries: https://github.com/FreeRADIUS/freeradius-server/tree/master/share/dictionary\n\nNo validation is performed to ensure that the protocol attributes used are valid for the specified Packet-Type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/synchronous"
          },
          {
            "$ref": "#/components/parameters/timeout"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPacket"
              }
            }
          },
          "description": "The request packet to send"
        }
      }
    },
    "/request/{protocol}/id/{requestId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/protocol"
        },
        {
          "$ref": "#/components/parameters/requestId"
        }
      ],
      "get": {
        "summary": "Retrieve an asychronous request",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePacket"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/notFoundResponse"
          },
          "408": {
            "$ref": "#/components/responses/timeoutResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalErrorResponse"
          }
        },
        "operationId": "get-request-protocol-id-requestId",
        "description": "Retrieve the result of an asynchronous request",
        "parameters": [
          {
            "$ref": "#/components/parameters/delete"
          }
        ]
      },
      "delete": {
        "summary": "Delete an asynchronous request",
        "operationId": "delete-request-protocol-id-requestId",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "$ref": "#/components/responses/notFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/internalErrorResponse"
          }
        },
        "description": "Delete an asynchronous request, cancelling any requests in progress"
      }
    },
    "/request/{protocol}/id": {
      "parameters": [
        {
          "$ref": "#/components/parameters/protocol"
        }
      ],
      "get": {
        "summary": "Get an array of completed responses",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of completed responses",
                  "items": {
                    "$ref": "#/components/schemas/ResponsePacket",
                    "x-stoplight": {
                      "id": "f9mjjvowe8ef1"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-request-protocol-id",
        "description": "Returns an array of the IDs for any outstanding requests",
        "parameters": [
          {
            "$ref": "#/components/parameters/delete"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PortIp": {
        "title": "PacketHeader",
        "x-stoplight": {
          "id": "k5iclnmp3l40a"
        },
        "type": "object",
        "description": "An object describing a src or dst ip/port combination\n",
        "properties": {
          "ip": {
            "type": "string",
            "x-stoplight": {
              "id": "zcbgomt0rsbc5"
            },
            "description": "An IPv4 or IPv6 address",
            "example": "10.0.0.1"
          },
          "port": {
            "type": "integer",
            "x-stoplight": {
              "id": "dh4gykzg5s3mn"
            },
            "format": "int32",
            "example": 1812,
            "maximum": 65535,
            "minimum": 1,
            "description": "A TCP or UDP port"
          }
        },
        "examples": []
      },
      "PacketHeader": {
        "title": "PacketHeader",
        "x-stoplight": {
          "id": "wyl6k3csy312i"
        },
        "type": "object",
        "description": "An object describing fields in an IP packet header",
        "properties": {
          "src": {
            "$ref": "#/components/schemas/PortIp",
            "x-stoplight": {
              "id": "g0b4fc1uzqpju"
            },
            "description": "Source port/IP"
          },
          "dst": {
            "$ref": "#/components/schemas/PortIp",
            "x-stoplight": {
              "id": "knyblx9g7ebeo"
            },
            "description": "Destination port/ip"
          },
          "timestamp": {
            "type": "string",
            "x-stoplight": {
              "id": "v8nncw1j1lm64"
            },
            "description": "The time the response was received.  Not set for requests.",
            "format": "date-time",
            "example": "2024-04-03T20:06:22Z"
          }
        },
        "required": [
          "dst"
        ],
        "examples": []
      },
      "ResponsePacketAttributes": {
        "title": "ResponsePacketAttributes",
        "x-stoplight": {
          "id": "2jiobclrfqsvx"
        },
        "type": "object",
        "description": "A JSON representation of a protocol packet.  May contain any attributes found in the protocol specific dictionary.\n\nhttps://github.com/FreeRADIUS/freeradius-server/tree/master/share/dictionary\n\nExample attributes below are for RADIUS.  Actual fields allowed are not limited to this Open API specification.  Where needed, multiple values (or multiple instances of the same attribute) are provided as an array.",
        "examples": [
          {
            "Vendor-Specific": {
              "Nokia-SR": {
                "SLA-Prof-Str": "My-First-SLA-Profile"
              }
            }
          }
        ],
        "properties": {
          "Packet-Type": {
            "type": "string",
            "x-stoplight": {
              "id": "7zbio2beq8vwy"
            },
            "example": "Access-Accept",
            "description": "The type of response packet received",
            "enum": [
              "Access-Accept",
              "Access-Reject",
              "Access-Challenge",
              "Accounting-Response",
              "Disconnect-ACK",
              "Disconnect-NAK",
              "CoA-ACK",
              "CoA-NAK"
            ]
          },
          "Reply-Message": {
            "type": "string",
            "x-stoplight": {
              "id": "zwrovdsveunp4"
            }
          }
        }
      },
      "RequestPacketAttributes": {
        "title": "RequestPacketAttributes",
        "x-stoplight": {
          "id": "5v596s8xt54c2"
        },
        "type": "object",
        "description": "A JSON representation of a protocol packet.  May contain any attributes found in the protocol specific dictionary.\n\nhttps://github.com/FreeRADIUS/freeradius-server/tree/master/share/dictionary\n\nExample attributes below are for RADIUS.  Actual fields allowed are not limited to this Open API specification.  Multiple values may be provided as an array.",
        "examples": [
          {
            "User-Name": "bob",
            "User-Password": "SuperSecret"
          }
        ],
        "properties": {
          "Packet-Type": {
            "type": "string",
            "x-stoplight": {
              "id": "7zbio2beq8vwy"
            },
            "enum": [
              "Access-Request",
              "Accounting-Request",
              "CoA-Request",
              "Status-Request",
              "DM-Request"
            ],
            "default": "Access-Request",
            "example": "Access-Request",
            "description": "The type of packet being sent"
          },
          "User-Name": {
            "type": "string",
            "x-stoplight": {
              "id": "7w1vz1nan2cnt"
            },
            "example": "bob",
            "description": "The RFC2865 attribute to identify a user: https://github.com/FreeRADIUS/freeradius-server/blob/master/share/dictionary/radius/dictionary.rfc2865#L11"
          },
          "User-Password": {
            "type": "string",
            "x-stoplight": {
              "id": "r5b93x9csz8r3"
            },
            "description": "The RFC2865 attribute to specify a user's password: https://github.com/FreeRADIUS/freeradius-server/blob/master/share/dictionary/radius/dictionary.rfc2865#L12",
            "example": "SuperSecret"
          },
          "Vendor-Specific": {
            "type": "object",
            "x-stoplight": {
              "id": "yencjwbaqr7ly"
            },
            "description": "Vendor-Specific attribute from RFC 2865: https://github.com/FreeRADIUS/freeradius-server/blob/master/share/dictionary/radius/dictionary.rfc2865#L36",
            "properties": {
              "Nokia-SR": {
                "type": "object",
                "x-stoplight": {
                  "id": "li2eyfpbqxrcf"
                },
                "description": "Vendor attribute: https://github.com/FreeRADIUS/freeradius-server/blob/master/share/dictionary/radius/dictionary.nokia.sr#L18",
                "properties": {
                  "SLA-Prof-Str": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "72pwsno0ykcim"
                    },
                    "description": "Attribute from the Nokia-SR dictionary (https://github.com/FreeRADIUS/freeradius-server/blob/master/share/dictionary/radius/dictionary.nokia.sr#L58)",
                    "example": "My-First-SLA-Profile"
                  }
                }
              }
            }
          },
          "EAP-Message": {
            "type": "array",
            "x-stoplight": {
              "id": "qfe0bmvuxe0px"
            },
            "description": "Raw EAP-Data: https://github.com/FreeRADIUS/freeradius-server/blob/0a6c82719dd7f5776b0ea11ba55000ec9937c5ad/share/dictionary/radius/dictionary.rfc2869#L25",
            "items": {
              "x-stoplight": {
                "id": "jsxy6t2eh801w"
              },
              "type": "string",
              "example": "0x01020304"
            }
          }
        }
      },
      "RequestPacket": {
        "title": "RequestPacket",
        "x-stoplight": {
          "id": "mhzux416sobwr"
        },
        "type": "object",
        "description": "A request packet",
        "properties": {
          "net": {
            "$ref": "#/components/schemas/PacketHeader",
            "x-stoplight": {
              "id": "aktre3rx0116h"
            },
            "description": "Where to send the request"
          },
          "attributes": {
            "$ref": "#/components/schemas/RequestPacketAttributes",
            "x-stoplight": {
              "id": "q8eui2r7pa98d"
            },
            "description": "Attributes to send in the request"
          },
          "secret": {
            "type": "string",
            "x-stoplight": {
              "id": "se6r3d83bqyni"
            },
            "example": "testing123",
            "description": "An optional share-secret, for protocols like RADIUS, which require one"
          }
        },
        "examples": [
          {
            "net": {
              "dst": {
                "ip": "10.0.0.1",
                "port": 1812
              }
            },
            "attributes": {
              "User-Name": "bob",
              "User-Password": "SuperSecret"
            },
            "secret": "testing123"
          }
        ]
      },
      "ResponsePacket": {
        "title": "ResponsePacket",
        "x-stoplight": {
          "id": "gno4vspn9zvzw"
        },
        "type": "object",
        "description": "A response packet",
        "properties": {
          "net": {
            "$ref": "#/components/schemas/PacketHeader",
            "x-stoplight": {
              "id": "aktre3rx0116h"
            },
            "description": "IP header information from the response"
          },
          "attributes": {
            "$ref": "#/components/schemas/ResponsePacketAttributes",
            "x-stoplight": {
              "id": "q8eui2r7pa98d"
            },
            "description": "Attributes received in the response"
          }
        },
        "examples": [
          {
            "net": {
              "src": {
                "ip": "10.0.0.2",
                "port": 10875
              },
              "dst": {
                "ip": "10.0.0.1",
                "port": 1812
              },
              "timestamp": "2024-04-03T20:06:22Z"
            },
            "attributes": {
              "Vendor-Specific": {
                "Nokia-SR": {
                  "SLA-Prof-Str": "My-First-SLA-Profile"
                }
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "protocol": {
        "name": "protocol",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "radius",
            "dhcpv4",
            "dhcpv6",
            "dns"
          ]
        },
        "description": "Which protocol to use to send the request"
      },
      "timeout": {
        "name": "timeout",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 100,
          "maximum": 10000,
          "example": 3000,
          "default": 3000
        },
        "description": "Timeout in milliseconds.  After this period any responses will be discarded, and the request will be marked as complete"
      },
      "synchronous": {
        "name": "synchronous",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        },
        "description": "If true, the API server will not respond until a timeout occurs or a response is received, if false, the API server will respond with a request ID which can be used to retrieve the response via polling"
      },
      "delete": {
        "name": "delete",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "description": "Delete request when the response has been retrieved"
      },
      "requestId": {
        "name": "requestId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "description": "The request to retrieve the asynchronous response for"
      }
    },
    "responses": {
      "notFoundResponse": {
        "description": "Returned when an asychronous request doesn't exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-stoplight": {
                    "id": "7pmhqprdbal4z"
                  },
                  "example": "No pending request with ID 0 found",
                  "description": "A description of the error"
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "message": "No pending request with ID 0 found"
                }
              }
            }
          }
        }
      },
      "invalidRequestResponse": {
        "description": "Response on an invalid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-stoplight": {
                    "id": "4bjw08x7j4c9j"
                  },
                  "example": "Invalid value for attribute X",
                  "description": "A description of the error"
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "message": "Invalid value for attribute X"
                }
              }
            }
          }
        }
      },
      "internalErrorResponse": {
        "description": "Response on server internal error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-stoplight": {
                    "id": "7mv1myv8x8kr2"
                  },
                  "example": "An internal error ocured",
                  "description": "A description of the error"
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "message": "An internal error ocured"
                }
              }
            }
          }
        }
      },
      "timeoutResponse": {
        "description": "Response when a request timed out",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "x-stoplight": {
                    "id": "alq1k25be4049"
                  },
                  "description": "A description of the error",
                  "example": "Response timed out"
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "message": "Response timed out"
                }
              }
            }
          }
        }
      }
    }
  }
}