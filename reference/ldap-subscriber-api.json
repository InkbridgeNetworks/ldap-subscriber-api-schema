{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "j70spdn4dvy7p"
  },
  "info": {
    "title": "NetworkRADIUS' LDAP based subscriber management API for Carriers",
    "version": "1.0",
    "summary": "A Lua-based, lightweight wrapper around OpenLDAP",
    "description": "This API runs natively in OpenResty/NGINX to provide a high performance restful layer around an LDAP instance.  It should be mostly object agonistic, but has some special endpoints.",
    "contact": {
      "name": "Arran Cudbard-Bell",
      "url": "http://www.networkradius.com",
      "email": "support@networkradius.com"
    },
    "license": {}
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/realms": {
      "get": {
        "summary": "List all realms",
        "tags": [
          "Realm Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/realm"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realms",
        "description": "Return an array of available realms"
      },
      "post": {
        "summary": "Create a realm",
        "operationId": "post-realms",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new realm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "The definition of the new realm"
        },
        "tags": [
          "Realm Management"
        ]
      }
    },
    "/realms/{realmId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/realmId"
        }
      ],
      "get": {
        "summary": "Retrieve a realm definition",
        "tags": [
          "Realm Management"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realms-realmId",
        "description": "Get specific realm definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "Return an existing realm definition"
        }
      },
      "put": {
        "summary": "Replace a realm",
        "operationId": "put-realms-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update given realm definition by replacing all the fields of the current object with the new values",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "New definition of the realm"
        },
        "tags": [
          "Realm Management"
        ]
      },
      "patch": {
        "summary": "Update a realm",
        "operationId": "patch-realms-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update given realm definition by replacing only the provided attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "Partial definition of the realm"
        },
        "tags": [
          "Realm Management"
        ]
      },
      "delete": {
        "summary": "Delete a realm",
        "operationId": "delete-realms-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ],
        "description": "Delete realm definition",
        "tags": [
          "Realm Management"
        ]
      }
    },
    "/realms/{realmId}/subscribers": {
      "parameters": [
        {
          "name": "realmId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "example.org"
          },
          "description": "Realm this operation relates to"
        }
      ],
      "get": {
        "summary": "List all subscribers in a realm",
        "tags": [
          "Subscriber Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscriber"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realms-realmId-subscriber",
        "description": "Return an array of all subscriber objects in a realm"
      },
      "post": {
        "summary": "Create a subscriber",
        "operationId": "post-realms-realmId-subscribers",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "Definition of the subscriber to add"
        },
        "tags": [
          "Subscriber Management"
        ],
        "description": "Add a new subscriber definition"
      }
    },
    "/realms/{realmId}/subscribers/{compoundSubscriberId}": {
      "parameters": [
        {
          "name": "realmId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "example.org"
          },
          "description": "Realm this operation relates to"
        },
        {
          "name": "compoundSubscriberId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123456789+fixedLine"
          },
          "description": "A combination of the subscriber's unique id and the service the account relates to"
        }
      ],
      "get": {
        "summary": "Retrieve a subscriber",
        "tags": [
          "Subscriber Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriber"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realms-realmId-subscribers-subscriberId",
        "description": "Get specific subscriber definition for a given realm"
      },
      "put": {
        "summary": "Replace a subscriber",
        "operationId": "put-realms-realmId-subscribers-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "New definition of the subscriber"
        },
        "description": "Update specific subscriber definition for a given realm by replacing all the fields of the current object with the new values",
        "tags": [
          "Subscriber Management"
        ]
      },
      "patch": {
        "summary": "Update a subscriber",
        "operationId": "patch-realms-realmId-subscribers-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "Partial definition of the subscriber"
        },
        "tags": [
          "Subscriber Management"
        ],
        "description": "Update specific subscriber definition for a given realm by replacing only the provided attributes"
      },
      "delete": {
        "summary": "Delete a subscriber",
        "operationId": "delete-realms-realmId-subscribers-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete specific subscriber definition for a given realm",
        "tags": [
          "Subscriber Management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/service": {
      "get": {
        "summary": "List all configured services",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/service"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service",
        "description": "Return an array of available service objects indexed by accessMedia"
      },
      "post": {
        "summary": "Create a service",
        "operationId": "post-service",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a service, a collection of profiles grouped by access media",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "description": "Definition of the service to add"
        }
      }
    },
    "/service/{accessMediaId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessMediaId"
        }
      ],
      "get": {
        "summary": "Retrieve a service",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-accessMediaId",
        "description": "Get a specific service defintion"
      },
      "put": {
        "summary": "Replace a service",
        "operationId": "put-service-accessMediaId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update specific service replacing all the fields of the current object with the new values",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "New definition of the service"
        }
      },
      "patch": {
        "summary": "Update a service",
        "operationId": "patch-service-accessMediaId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "description": "Partial definition of the service"
        },
        "description": "Update specific service by replacing only the provided attributes"
      },
      "delete": {
        "summary": "Delete a service",
        "operationId": "delete-service-accessMediaId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a specific service",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/service/{accessMediaId}/profile": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessMediaId"
        }
      ],
      "get": {
        "summary": "Retrieve all serviceProfiles for a service",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/serviceProfile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-accessMediaID-profile",
        "description": "Return an array of available serviceProfiles (abstract profiles) for a given service"
      },
      "post": {
        "summary": "Create a serviceProfile",
        "operationId": "post-service-accessMediaId-profile",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Definition of the serviceProfile (abstract profile) to add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "Definition of the serviceProfile to add"
        }
      }
    },
    "/service/{accessMediaId}/profile/{profileId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessMediaId"
        },
        {
          "$ref": "#/components/parameters/profileId"
        }
      ],
      "get": {
        "summary": "Retrieve a specific serviceProfile for a service",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-accessMediaId-profile-profileId",
        "description": "Return a serviceProfile, an abstract profile describing a class of service"
      },
      "put": {
        "summary": "Replace a serviceProfile",
        "operationId": "put-service-accessMediaId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a specific serviceProfile replacing all the fields of the current object with the new values",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "New definition of the serviceProfile"
        }
      },
      "patch": {
        "summary": "Update a serviceProfile",
        "operationId": "patch-service-accessMediaId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update specific serviceProfile by replacing only the provided attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "Partial definition of the serviceProfile"
        }
      },
      "delete": {
        "summary": "Delete a serviceProfile",
        "operationId": "delete-service-accessMediaId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a specific serviceProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/service/{accessMediaId}/profile/{profileId}/policy": {
      "parameters": [
        {
          "name": "accessMediaId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "fixedLine"
          },
          "description": "Identifier for a service profile category (maps to subscriberAccessMedia)"
        },
        {
          "name": "profileId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "INETG1M"
          },
          "description": "Identifier for an abstract class of service profile"
        }
      ],
      "get": {
        "summary": "List all configured policies for a serviceProfile",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/freeradusPolicy"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-accessMediaId-profile-profileId-policy",
        "description": "Return an array of policies (concrete profiles containing FreeRADIUS attributes) associated with a serviceProfile (an abstract profile)."
      },
      "post": {
        "summary": "Create a freeradiusPolicy",
        "operationId": "post-service-accessMediaId-profile-profileId-policy",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Definition of a policy (concrete profile) to add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          },
          "description": "Definition of a policy to add"
        }
      }
    },
    "/service/{accessMediaId}/profile/{profileId}/policy/{clientGroupId}": {
      "parameters": [
        {
          "name": "accessMediaId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "fixedLine"
          },
          "description": "Identifier for a service profile category (maps to subscriberAccessMedia)"
        },
        {
          "name": "profileId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "INETG1M"
          },
          "description": "Identifier for an abstract class of service profile"
        },
        {
          "name": "clientGroupId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "myFirstNas"
          },
          "description": "Identifier for a concrete class of service profile"
        }
      ],
      "get": {
        "summary": "Retrieve a specific policy for a serviceProfile",
        "tags": [
          "Profile Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/freeradusPolicy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-accessMediaId-profile-profileId-policy-clientGroup-Id",
        "description": "Return a specific policy (a concrete profile)"
      },
      "put": {
        "summary": "Replace a freeradiusPolicy",
        "operationId": "put-service-accessMediaId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a specific profile replacing all the fields of the current object with the new values",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          },
          "description": "New definition of the policy"
        }
      },
      "patch": {
        "summary": "Update a freeradiusPolicy",
        "operationId": "patch-service-accessMediaId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update specific freeradiusPolicy by replacing only the provided attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a freeradiusPolicy",
        "operationId": "delete-service-accessMediaId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a specific freeradiusPolicy"
      }
    }
  },
  "components": {
    "schemas": {
      "realm": {
        "title": "realm",
        "x-stoplight": {
          "id": "or81e5rovv950"
        },
        "type": "object",
        "description": "Holds a set of subscribers, and LDAP/RADIUS attributes associated with a given realm",
        "properties": {
          "id": {
            "type": "string",
            "description": "The realm ID.  This may map directly with the domain portion in a user's NAI, and can be used to separate subscribers belonging to different areas of the business, or to external customers.",
            "example": "example.org"
          },
          "description": {
            "type": "string",
            "description": "A humanly readable description of the realm",
            "example": "example.org subscribers are actually foo subscribers, who we are authenticating on behalf of bar"
          },
          "servicePrecedence": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ],
            "example": "primary",
            "description": "If a subscriber did not authenticate using a qualified NAI, and appears in multiple realms, the first primary realm with take precedence."
          },
          "serviceProfile": {
            "type": "string",
            "format": "uri",
            "example": "http://192.168.0.1/service/fixedLine/profile/INETG1M",
            "description": "The URI of a serviceProfile object to apply to all subscribers in this realm.  The serviceProfile object must exist, and referential integrity will be enforced."
          }
        }
      },
      "subscriber": {
        "title": "subscriber",
        "x-stoplight": {
          "id": "39i82q1wb1101"
        },
        "type": "object",
        "description": "A subscriber - A user authenticating via the RADIUS service",
        "properties": {
          "id": {
            "type": "string",
            "description": "Must be set to the combination of subscriberID '+' serviceAccessMedia.  This uniquely identifies a subscriber object for a particular type of service, e.g. fixedLine vs wireless",
            "example": "123456789+fixedLine"
          },
          "subscriberId": {
            "type": "string",
            "description": "A unique (within a realm) identifier for a subscriber",
            "example": "123456789"
          },
          "serviceAccessMedia": {
            "type": "string",
            "description": "The type of access media this subscriber object relates to, e.g. fixedLine, wireless etc... Must match a configured service category",
            "example": "fixedLine"
          },
          "serviceProfile": {
            "type": "string",
            "format": "uri",
            "description": "The URI of a service profile object to apply to the subscriber",
            "example": "http://localhost:3000/service/fixedLine/profile/INETG1M"
          },
          "serviceProfileSuspended": {
            "type": "string",
            "description": "The URI of a service profile object to apply to the subscriber",
            "format": "uri",
            "example": "http://localhost:3000/service/fixedLine/profile/suspendedNonPayment"
          },
          "serviceStatus": {
            "type": "string",
            "enum": [
              "enabled",
              "disabled",
              "suspended"
            ],
            "description": "Whether this subscriber can access the service"
          },
          "userPassword": {
            "type": "string",
            "description": "A password used to authenticate the subscriber. If no password has been explicitly specified for the user (auth via DHCP for example), the User-Password attribute will still be populated in, incoming Access-Requests.  We need to check its value to ensure the RADIUS shared-secret (of which it is reversibly encrypted with) is correct. If a User-Password has not been explicitly set, it will usually be the same as User-Name or Calling-Station-ID",
            "example": "superSecret"
          },
          "servicePrecedence": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ],
            "description": "If multiple subscriber objects match an incoming Access-Request, the first subscriber object with \"primary\" will be used.",
            "example": "primary"
          },
          "clientGroup": {
            "type": "string",
            "format": "uri",
            "description": "The URI of a clientGroup to restrict logins from.",
            "example": "http://localhost:3000/policys/group1"
          },
          "subscriberGroup": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:3000/subscriber-groups/groupA",
            "description": "The URI of a subscriberGroup object.  Used to apply common sets of RADIUS attributes or serviceprofile to subscribers."
          },
          "portBinding": {
            "type": "boolean",
            "description": "If true, the subscriber will be unabled to authenticate via any other circuit than the one we learned the first time the subscriber authenticated."
          },
          "portBindingIdentifier": {
            "type": "string",
            "example": "DSLAM03-D6-KTP atm 0/0/0/44:0.35",
            "description": "The subscriber's unique circuit ID, either learned or pre-provisioned."
          },
          "lastRadiusClient": {
            "type": "string",
            "format": "uri",
            "description": "URI of the last client the subscriber authenticated via.  Primarily used for Change of Authorisation and disconnect messages.",
            "example": "http://localhost:3000/clients/192.0.2.1"
          },
          "policy": {
            "$ref": "#/components/schemas/freeradusPolicy"
          }
        },
        "required": [
          "id",
          "subscriberId",
          "serviceAccessMedia",
          "serviceProfile",
          "serviceStatus"
        ]
      },
      "client": {
        "title": "client",
        "x-stoplight": {
          "id": "zhddk66aypm1a"
        },
        "type": "object",
        "description": "A RADIUS client that is authorized to communicate with the RADIUS service.",
        "properties": {
          "id": {
            "type": "string",
            "example": "192.0.2.1",
            "description": "An IP address or subnet (cidr format) that uniquely identifies the RADIUS client"
          },
          "radiusClientSecret": {
            "type": "string",
            "example": "testing123",
            "description": "The shared secret (pre-shared-key) the RADIUS client will use to communicate with the RADIUS service.",
            "format": "password"
          },
          "radiusClientShortname": {
            "type": "string",
            "example": "my-test-client",
            "description": "A friendly name that will be shown in logs"
          },
          "radiusClientType": {
            "type": "string",
            "description": "What the RADIUS client is (type/make/model)",
            "example": "myFirstNAS"
          },
          "radiusClientRequireMa": {
            "type": "boolean",
            "description": "Whether we requires the Message-Authenticator attribute in Access-Requests from this client."
          },
          "radiusClientComment": {
            "type": "string",
            "description": "A humanly readable comment associated with the client",
            "example": "This RADIUS client authenticates all subscribers in the foo region of bar"
          }
        },
        "required": [
          "id"
        ]
      },
      "clientGroup": {
        "type": "object",
        "title": "clientGroup",
        "x-stoplight": {
          "id": "5b9nnqawh4d41"
        },
        "description": "A method of binding subscribers to a particular group of RADIUS clients.",
        "deprecated": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the clientGroup",
            "example": "group1"
          },
          "policy": {
            "$ref": "#/components/schemas/freeradusPolicy"
          }
        },
        "required": [
          "id"
        ]
      },
      "subscriberGroup": {
        "title": "subscriberGroup",
        "x-stoplight": {
          "id": "8y76ggnb1sgil"
        },
        "type": "object",
        "description": "A group of subscribers, used to apply RADIUS attribute overrides to subsets of subscribers.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the subscriberGroup"
          },
          "policy": {
            "$ref": "#/components/schemas/freeradusPolicy"
          }
        }
      },
      "service": {
        "title": "service",
        "x-stoplight": {
          "id": "ly2966j1k5o5v"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "Access media type e.g. fixedLine, wireless, cellular, matches subscriberAccessMedia"
      },
      "serviceProfile": {
        "title": "serviceProfile",
        "x-stoplight": {
          "id": "kprv79ox656ep"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "INET1M",
            "description": "A generic configuration applied to a subscriber"
          },
          "portBinding": {
            "type": "boolean",
            "description": "The default port binding state for any subscruber which uses this serviceProfile"
          },
          "generateCDR": {
            "type": "boolean",
            "description": "Generate Call Data Records for subscribers which use this subscriber-profile"
          },
          "allowSuspension": {
            "type": "boolean",
            "description": "Allow suspension for subscribers that use this serviceProfile.  If false, subscribers will be entirely disabled."
          }
        },
        "required": [
          "id"
        ],
        "description": "An abstract definition of a class-of-service a subscriber would receive.  This object holds non-FreeRADIUS attributes which controls how a subscriber is authorized/authenticated, and enables/disables additional logic that runs as the subscriber's request is processed.\n\nThis object contains multiple freeradiusPolicy objects (as children) which are the concrete implementation of the serviceProfile.  These freeradiusPolicy objects are indexed by radiusGroupId, and describe how to implement a given serviceProfile for a type of RADIUS client."
      },
      "freeradusPolicy": {
        "title": "freeradiusPolicy",
        "x-stoplight": {
          "id": "ebjv3rkkgvqou"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "A set of FreeRADIUS attributes which modify attributes in the current request, modifying request/control attributes and setting reply attributes.  A \"concrete\" implementation of a serviceProfile, or a set of attributes associated with a subscriber or subscriberGroup."
      }
    },
    "parameters": {
      "realmId": {
        "name": "realmId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "example.org"
        },
        "description": "Realm this operation relates to"
      },
      "prune": {
        "name": "prune",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "If true, delete any child objects, e.g. all the subscribers in a realm"
      },
      "compoundSubscriberId": {
        "name": "compoundSubscriberId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "123456789+fixedLine"
        },
        "description": "A combination of the subscriber's unique id and the service the account relates to"
      },
      "accessMediaId": {
        "name": "accessMediaId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "fixedLine"
        },
        "description": "Identifier for a service profile category (maps to subscriberAccessMedia)"
      },
      "profileId": {
        "name": "profileId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "INETG1M"
        },
        "description": "Identifier for an abstract class of service profile"
      },
      "clientGroupId": {
        "name": "clientGroupId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "myFirstNas"
        },
        "description": "Identifier for a concrete class of service profile"
      }
    },
    "responses": {
      "onCreate": {
        "description": "Response on creating a new object",
        "content": {
          "application/json": {
            "schema": {}
          }
        },
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "The URI of the resource that was just created"
          }
        }
      },
      "onInternalServerError": {
        "description": "An internal error has occurred while talking to one of the backend (LDAP or Postgres). For instance, an attribute was missing when creating an object.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_msg": {
                  "type": "string",
                  "description": "Raw error string from the service element which experienced the error."
                }
              }
            }
          }
        }
      },
      "onSuccess": {
        "description": "Response sent on a successful operation which did not create an object",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onNotFound": {
        "description": "Specified resource not found",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onConflict": {
        "description": "The requested operation conflicts with an existing resource (for instance, trying to create a duplicate resource) or you are trying to delete a node that has children.",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onNotAllowed": {
        "description": "The requested operation is not allowed for the given resource",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onBadRequest": {
        "description": "Can be any of the following:\n- The requested path doesn’t correspond to the schema\n- Missing or invalid data for POST or PUT operations. Data should always be valid\nJSON.\n- If data contains URL to another resource, the host part of the URL must be identical\nto the host data being created/modified.\n",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Profile Management"
    },
    {
      "name": "Realm Management"
    },
    {
      "name": "Subscriber Management"
    }
  ]
}