{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "j70spdn4dvy7p"
  },
  "info": {
    "title": "LDAP subscriber management API for carriers and ISPs",
    "version": "1.0",
    "summary": "A Lua-based, lightweight wrapper around OpenLDAP",
    "description": "This API runs natively in OpenResty/NGINX to provide a high performance restful layer around an LDAP instance.  It should be mostly object agonistic, but has some special endpoints",
    "contact": {
      "name": " Network RADIUS support",
      "url": "http://www.networkradius.com",
      "email": "support@networkradius.com"
    },
    "license": {
      "name": "Network RADIUS commercial license",
      "url": "https://support.networkradius.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/realm": {
      "get": {
        "tags": [
          "Realm management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/realm"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realm",
        "description": "Return an array of available realms",
        "summary": "List available realms"
      },
      "post": {
        "operationId": "post-realm",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new realm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "The definition of the new realm"
        },
        "tags": [
          "Realm management"
        ],
        "summary": "Add a new realm"
      }
    },
    "/realm/{realmId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/realmId"
        }
      ],
      "get": {
        "tags": [
          "Realm management"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realm-realmId",
        "description": "Get metadata for a realm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "Return an existing realm definition"
        },
        "summary": "Return a specific realm"
      },
      "put": {
        "operationId": "put-realm-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update realm metadata by replacing all the fields of the current object with the new values",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "New definition of the realm"
        },
        "tags": [
          "Realm management"
        ],
        "summary": "Replace a realm"
      },
      "patch": {
        "operationId": "patch-realm-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update realm metdata by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realm"
              }
            }
          },
          "description": "Partial definition of a realm"
        },
        "tags": [
          "Realm management"
        ],
        "summary": "Update a realm"
      },
      "delete": {
        "operationId": "delete-realm-realmId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ],
        "description": "Delete a realm.  The prune param must be true if the realm contains subscribers",
        "tags": [
          "Realm management"
        ],
        "summary": "Delete a realm"
      }
    },
    "/realm/{realmId}/subscriber": {
      "parameters": [
        {
          "$ref": "#/components/parameters/realmId"
        }
      ],
      "get": {
        "tags": [
          "Subscriber management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscriber"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realm-realmId-subscriber",
        "description": "Return an array of all subscribers in a realm",
        "summary": "List subscribers in a realm"
      },
      "post": {
        "operationId": "post-realm-realmId-subscriber",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "Definition of the subscriber to add"
        },
        "tags": [
          "Subscriber management"
        ],
        "description": "Add a new subscriber",
        "summary": "Add a subscriber to a realm"
      }
    },
    "/realm/{realmId}/subscriber/{compoundSubscriberId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/realmId"
        },
        {
          "$ref": "#/components/parameters/compoundSubscriberId"
        }
      ],
      "get": {
        "tags": [
          "Subscriber management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriber"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-realm-realmId-subscriber-subscriberId",
        "description": "Get specific subscriber for a given realm",
        "summary": "Return a subscriber"
      },
      "put": {
        "operationId": "put-realm-realmId-subscriber-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "New definition of the subscriber"
        },
        "description": "Replace an existing subscriber in a given realm",
        "tags": [
          "Subscriber management"
        ],
        "summary": "Replace a subscriber"
      },
      "patch": {
        "operationId": "patch-realm-realmId-subscriber-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": "Partial definition of a subscriber"
        },
        "tags": [
          "Subscriber management"
        ],
        "description": "Update a subscriber in a given realm by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "summary": "Update a subscriber"
      },
      "delete": {
        "operationId": "delete-realm-realmId-subscriber-subscriberId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a subscriber in a given realm",
        "tags": [
          "Subscriber management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ],
        "summary": "Delete a subscriber"
      }
    },
    "/group": {
      "get": {
        "tags": [
          "Subscriber group management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscriberGroup"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-group",
        "description": "Return an array of available subscriber groups",
        "summary": "List available subscriberGroups"
      },
      "parameters": [],
      "post": {
        "operationId": "post-group",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriberGroup"
              }
            }
          },
          "description": "Definition of the subscriber group to add"
        },
        "description": "Add a new subscriber group",
        "tags": [
          "Subscriber group management"
        ],
        "summary": "Add a subscriberGroup"
      }
    },
    "/group/{subscriberGroupId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriberGroupId"
        }
      ],
      "get": {
        "operationId": "get-group-subscriberGroupId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriberGroup"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Get a subscriber group definition",
        "tags": [
          "Subscriber group management"
        ],
        "summary": "Return a subscriberGroup"
      },
      "put": {
        "operationId": "put-group-subscriberGroupId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriberGroup"
              }
            }
          },
          "description": "New definition of the subscriber"
        },
        "description": "Replace subscriber group metadata.  Will not affect group membership",
        "tags": [
          "Subscriber group management"
        ],
        "summary": "Replace a subscriberGroup"
      },
      "patch": {
        "operationId": "patch-group-subscriberGroupId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriberGroup"
              }
            }
          },
          "description": "Partial definition of a subscriber group"
        },
        "description": "Update a subscriber group's metadata by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "tags": [
          "Subscriber group management"
        ],
        "summary": "Update a subscriberGroup"
      },
      "delete": {
        "operationId": "delete-group-subscriberGroupId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete a subscriber group",
        "tags": [
          "Subscriber group management"
        ],
        "summary": "Delete a subscriberGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/service": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/service"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service",
        "description": "Return an array of available services",
        "summary": "List available services",
        "tags": [
          "Service management"
        ]
      },
      "post": {
        "operationId": "post-service",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "description": "Definition of the service to add"
        },
        "summary": "Add a new service",
        "tags": [
          "Service management"
        ]
      }
    },
    "/service/{serviceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-serviceId",
        "description": "Get service metadata",
        "summary": "Return a service",
        "tags": [
          "Service management"
        ]
      },
      "put": {
        "operationId": "put-service-serviceId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace service metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "description": "New definition of the service"
        },
        "summary": "Replace a service",
        "tags": [
          "Service management"
        ]
      },
      "patch": {
        "operationId": "patch-service-serviceId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service"
              }
            }
          },
          "description": "Partial definition of a service"
        },
        "description": "Update service metadata by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "summary": "Update a service",
        "tags": [
          "Service management"
        ]
      },
      "delete": {
        "operationId": "delete-service-serviceId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ],
        "tags": [
          "Service management"
        ]
      }
    },
    "/service/{serviceId}/profile": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/serviceProfile"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-serviceId-profile",
        "description": "Return an array of available serviceProfiles (abstract profiles) for a given service",
        "summary": "List serviceProfiles in a service",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      },
      "post": {
        "operationId": "post-service-serviceId-profile",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new serviceProfile (abstract profile)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "Definition of the serviceProfile (abstract profile) to add"
        },
        "summary": "Add a serviceProfile to a service",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      }
    },
    "/service/{serviceId}/profile/{profileId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceId"
        },
        {
          "$ref": "#/components/parameters/profileId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceProfile"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-serviceId-profile-profileId",
        "description": "Return a serviceProfile i.e. an abstract profile describing a class of service",
        "summary": "Return a serviceProfile",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      },
      "put": {
        "operationId": "put-service-serviceId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace a serviceProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "New definition of the serviceProfile"
        },
        "summary": "Replace a serviceProfile",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      },
      "patch": {
        "operationId": "patch-service-serviceId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a serviceProfile by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serviceProfile"
              }
            }
          },
          "description": "Partial definition of a serviceProfile"
        },
        "summary": "Update a serviceProfile",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      },
      "delete": {
        "operationId": "delete-service-serviceId-profile-profileId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a serviceProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ],
        "summary": "Delete a serviceProfile",
        "tags": [
          "Abstract profile (serviceProfile) management"
        ]
      }
    },
    "/service/{serviceId}/profile/{profileId}/policy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/serviceId"
        },
        {
          "$ref": "#/components/parameters/profileId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/freeradusPolicy"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-serviceId-profile-profileId-policy",
        "description": "Return an array of policies (concrete profiles containing FreeRADIUS attributes) associated with a serviceProfile (an abstract profile)",
        "summary": "List freeradiusPolicies in a serviceProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ]
      },
      "post": {
        "operationId": "post-service-serviceId-profile-profileId-policy",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Definition of a policy (concrete profile) to add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          },
          "description": "Definition of a policy to add"
        },
        "summary": "Add a freeradiusProfile to a serviceProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ]
      }
    },
    "/service/{serviceId}/profile/{profileId}/policy/{clientGroupId}": {
      "parameters": [
        {
          "name": "serviceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "fixedLine"
          },
          "description": "Identifier for a type of service provided by the ISP or carrier, e.g fixedLine, cellular etc.."
        },
        {
          "name": "profileId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "INETG1M"
          },
          "description": "Identifier for an abstract class of service profile"
        },
        {
          "name": "clientGroupId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "myFirstNas"
          },
          "description": "Identifier for a concrete class of service profile"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/freeradusPolicy"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-service-serviceId-profile-profileId-policy-clientGroup-Id",
        "description": "Return a freeradiusPolicy (a concrete profile)",
        "summary": "Return a freeradiusProfile associated with a serviceProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ]
      },
      "put": {
        "operationId": "put-service-serviceId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace a freeradiusPolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          },
          "description": "New definition of the policy"
        },
        "summary": "Replace a freeradiusProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ]
      },
      "patch": {
        "operationId": "patch-service-serviceId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a freeradiusPolicy by replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/freeradusPolicy"
              }
            }
          },
          "description": "Partial definition of a freeradiusPolicy"
        },
        "summary": "Update a freeradiusProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ]
      },
      "delete": {
        "operationId": "delete-service-serviceId-profile-profileId-policy-clientGroupId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/onSuccess"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a freeradiusPolicy",
        "summary": "Delete a freeradiusProfile",
        "tags": [
          "Concrete profile (freeradiusProfile) management"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/client": {
      "get": {
        "tags": [
          "Client management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/client"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-client",
        "description": "Return an array of clients",
        "summary": "List clients"
      },
      "post": {
        "operationId": "post-client",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "Definition of an client to add"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Add an client"
      }
    },
    "/client/{clientId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clientId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/client"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-client-clientId",
        "description": "Return an client",
        "tags": [
          "Client management"
        ],
        "summary": "Return an client"
      },
      "put": {
        "operationId": "put-client-clientId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace an client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "New definition of the client"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Replace an client"
      },
      "patch": {
        "operationId": "patch-client-clientId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update an client replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "Partial definition of an client"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Update an client"
      },
      "delete": {
        "operationId": "delete-client-clientId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete an client",
        "tags": [
          "Client management"
        ],
        "summary": "Delete an client",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/client/{clientId}/port": {
      "get": {
        "tags": [
          "Client management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/portQinQ"
                          },
                          {
                            "$ref": "#/components/schemas/portPhysical"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-client-port",
        "description": "Return an array of ports associated with an client",
        "summary": "List ports associated with a client"
      },
      "post": {
        "operationId": "post-client-port",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "Definition of an client to add"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Add a port associated with a client"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/clientId"
        }
      ]
    },
    "/client/{clientId}/port/{portId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clientId"
        },
        {
          "$ref": "#/components/parameters/portId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/portQinQ"
                    },
                    {
                      "$ref": "#/components/schemas/portPhysical"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-client-portId",
        "description": "Return a port associated with an access deivce",
        "tags": [
          "Client management"
        ],
        "summary": "Return a port associated with a client"
      },
      "put": {
        "operationId": "put-client-portId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace a port",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "New definition of the client"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Replace a port associated with a client"
      },
      "patch": {
        "operationId": "patch-client-portId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a port",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/client"
              }
            }
          },
          "description": "Partial definition of an client"
        },
        "tags": [
          "Client management"
        ],
        "summary": "Update a port associated with a client"
      },
      "delete": {
        "operationId": "delete-client-portd",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a port",
        "tags": [
          "Client management"
        ],
        "summary": "Delete an client",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/clientGroup": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/clientGroup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-client-group",
        "description": "Return an array of clientGroups",
        "tags": [
          "Client group management"
        ],
        "summary": "List clientGroups"
      },
      "post": {
        "operationId": "post-clientGroup",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new clientGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientGroup"
              }
            }
          },
          "description": "Definition of the clientGroup to add"
        },
        "tags": [
          "Client group management"
        ],
        "summary": "Add an clientGroup"
      }
    },
    "/clientGroup/{clientGroupId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clientGroupId"
        }
      ],
      "get": {
        "tags": [
          "Client group management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientGroup"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-client-group-clientGroupId",
        "description": "Return an clientGroup",
        "summary": "Return an clientGroup"
      },
      "put": {
        "operationId": "put-clientGroup-clientGroupId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/client"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace an clientGroup metadata and profiles.  Does not affect group membership",
        "tags": [
          "Client group management"
        ],
        "summary": "Replace an clientGroup"
      },
      "patch": {
        "operationId": "patch-clientGroup-clientGroupId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update an clientGroup replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientGroup"
              }
            }
          },
          "description": "Partial definition of an clientGroup"
        },
        "tags": [
          "Client group management"
        ],
        "summary": "Update an clientGroup"
      },
      "delete": {
        "operationId": "delete-clientGroup-clientGroupId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete an clientGroup",
        "tags": [
          "Client group management"
        ],
        "summary": "Delete an clientGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/accessDevice": {
      "get": {
        "tags": [
          "accessDevice management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accessDevice"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-accessDevice",
        "description": "Return an array of accessDevices",
        "summary": "List accessDevices"
      },
      "post": {
        "operationId": "post-accessDevice",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new accessDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "Definition of an accessDevice to add"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Add an accessDevice"
      }
    },
    "/accessDevice/{accessDeviceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessDeviceId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessDevice"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-accessDevice-accessDeviceId",
        "description": "Return an accessDevice",
        "tags": [
          "accessDevice management"
        ],
        "summary": "Return an accessDevice"
      },
      "put": {
        "operationId": "put-accessDevice-accessDeviceId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace an accessDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "New definition of the accessDevice"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Replace an accessDevice"
      },
      "patch": {
        "operationId": "patch-accessDevice-accessDeviceId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update an accessDevice replacing only the provided attributes.\n\nAttributes with a null value will be removed.\n\nMulti-valued attributes will have all values replaced.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "Partial definition of an accessDevice"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Update an accessDevice"
      },
      "delete": {
        "operationId": "delete-accessDevice-accessDeviceId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete an accessDevice",
        "tags": [
          "accessDevice management"
        ],
        "summary": "Delete an accessDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    },
    "/accessDevice/{accessDeviceId}/port": {
      "get": {
        "tags": [
          "accessDevice management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/portQinQ"
                          },
                          {
                            "$ref": "#/components/schemas/portPhysical"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-accessDevice-port",
        "description": "Return an array of ports associated with an accessDevice",
        "summary": "List ports associated with an accessDevice"
      },
      "post": {
        "operationId": "post-accessDevice-port",
        "responses": {
          "201": {
            "$ref": "#/components/responses/onCreate"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "409": {
            "$ref": "#/components/responses/onConflict"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Add a new accessDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "Definition of an accessDevice to add"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Add a port associated with an accessDevice"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/accessDeviceId"
        }
      ]
    },
    "/accessDevice/{accessDeviceId}/port/{portId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessDeviceId"
        },
        {
          "$ref": "#/components/parameters/portId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/portQinQ"
                    },
                    {
                      "$ref": "#/components/schemas/portPhysical"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "operationId": "get-accessDevice-portId",
        "description": "Return a port associated with an access deivce",
        "tags": [
          "accessDevice management"
        ],
        "summary": "Return a port associated with an accessDevice"
      },
      "put": {
        "operationId": "put-accessDevice-portId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Replace a port",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "New definition of the accessDevice"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Replace a port associated with an accessDevice"
      },
      "patch": {
        "operationId": "patch-accessDevice-portId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/onBadRequest"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Update a port",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessDevice"
              }
            }
          },
          "description": "Partial definition of an accessDevice"
        },
        "tags": [
          "accessDevice management"
        ],
        "summary": "Update a port associated with an accessDevice"
      },
      "delete": {
        "operationId": "delete-accessDevice-portd",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/onNotFound"
          },
          "500": {
            "$ref": "#/components/responses/onInternalServerError"
          }
        },
        "description": "Delete a port",
        "tags": [
          "accessDevice management"
        ],
        "summary": "Delete a port associated with a client",
        "parameters": [
          {
            "$ref": "#/components/parameters/prune"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "realm": {
        "title": "realm",
        "x-stoplight": {
          "id": "or81e5rovv950"
        },
        "type": "object",
        "description": "Holds a set of subscriber, and LDAP/RADIUS attributes associated with a given realm",
        "properties": {
          "id": {
            "type": "string",
            "description": "The realm ID.  This may map directly with the domain portion in a user's NAI, and can be used to separate subscriber belonging to different areas of the business, or to external customers",
            "example": "example.org"
          },
          "description": {
            "type": "string",
            "description": "A humanly readable description of the realm",
            "example": "example.org subscriber are actually foo subscriber, who we are authenticating on behalf of bar"
          },
          "servicePrecedence": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ],
            "example": "primary",
            "description": "If a subscriber did not authenticate using a qualified NAI, and appears in multiple realm, the first primary realm with take precedence"
          },
          "serviceProfile": {
            "type": "string",
            "format": "uri",
            "example": "http://192.168.0.1/service/fixedLine/profile/INETG1M",
            "description": "The URI of a serviceProfile object to apply to all subscriber in this realm.  The serviceProfile object must exist, and referential integrity will be enforced"
          }
        }
      },
      "subscriber": {
        "title": "subscriber",
        "x-stoplight": {
          "id": "39i82q1wb1101"
        },
        "type": "object",
        "description": "A subscriber - A user authenticating via the RADIUS service.\n\nNote: The attributes listed in the definition of the object are a subset of the attributes available.\n\nAny attribute that's available in the relevant LDAP schema (freeradius-radius.schema, freeradius-dhcpv4.schema, freeradius-dhcpv6.schema, etc...) for the protocol, can be included in POST, PATCH, PUT actions, including generic attributes such as `radiusAttribute`.  Generic attributes take the format `<attribute> <op> <quote><value><quote>` e.g. `Reply-Message := \"Welcome user %{User-Name}\"`, and can be used to add any attribute allowed in the protocol dictionary.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Must be set to the combination of subscriberID '+' serviceId.  This uniquely identifies a subscriber object for a particular type of service, e.g. fixedLine vs wireless",
            "example": "123456789+fixedLine"
          },
          "subscriberId": {
            "type": "string",
            "description": "A unique (within a realm) identifier for a subscriber",
            "example": "123456789"
          },
          "serviceStatus": {
            "type": "string",
            "enum": [
              "enabled",
              "disabled",
              "suspended"
            ],
            "description": "Whether this subscriber can access the service"
          },
          "statusReason": {
            "type": "string",
            "description": "Why the subscriber's service was disabled or suspended"
          },
          "serviceId": {
            "type": "string",
            "description": "The type of access media this subscriber object relates to, e.g. fixedLine, wireless etc... Must match a configured service category",
            "example": "fixedLine"
          },
          "servicePrecedence": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ],
            "description": "If multiple subscriber objects match an incoming Access-Request, the first subscriber object with \"primary\" will be used",
            "example": "primary"
          },
          "serviceProfile": {
            "type": "string",
            "format": "uri",
            "description": "The URI of a service profile object to apply to the subscriber",
            "example": "http://localhost:3000/service/fixedLine/profile/INETG1M"
          },
          "serviceProfileSuspended": {
            "type": "string",
            "description": "The URI of a service profile object to apply to the subscriber",
            "format": "uri",
            "example": "http://localhost:3000/service/fixedLine/profile/suspendedNonPayment"
          },
          "clientGroup": {
            "type": "array",
            "format": "uri",
            "description": "The URI(s) of a clientGroup to restrict subscriber to.  Prevents subscriber from connecting RADIUS clients outside of this set of groups",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "example": "http://localhost:3000/client-groups/example.org-bngs",
              "format": "uri"
            }
          },
          "subscriberGroup": {
            "type": "array",
            "format": "uri",
            "description": "The URI of a subscriberGroup object.  Used to apply common sets of RADIUS attributes or serviceProfiles to subscriber",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "portBindingclient": {
            "type": "string",
            "format": "uri",
            "description": "URI of the last client the subscriber authenticated via.  Primarily used for Change of Authorisation and disconnect messages",
            "example": "http://localhost:3000/clients/192.0.2.1"
          },
          "portBindingIdentifier": {
            "type": "string",
            "example": "DSLAM03-D6-KTP atm 0/0/0/44:0.35",
            "description": "The subscriber's unique circuit ID, either learned or pre-provisioned"
          },
          "portBindingModified": {
            "type": "string",
            "format": "date-time",
            "description": "When port binding details were last updated",
            "readOnly": true
          },
          "portBinding": {
            "type": "boolean",
            "description": "If true, the subscriber will be unabled to authenticate via any other circuit than the one we learned the first time the subscriber authenticated"
          }
        },
        "required": [
          "id",
          "subscriberId",
          "serviceStatus",
          "serviceId",
          "servicePrecedence",
          "serviceProfile"
        ]
      },
      "subscriberGroup": {
        "title": "subscriberGroup",
        "x-stoplight": {
          "id": "8y76ggnb1sgil"
        },
        "type": "object",
        "description": "A group of subscriber, used to apply RADIUS attribute overrides to subsets of subscriber",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the subscriberGroup"
          },
          "policy": {
            "$ref": "#/components/schemas/freeradusPolicy"
          }
        }
      },
      "client": {
        "title": "client",
        "x-stoplight": {
          "id": "zhddk66aypm1a"
        },
        "type": "object",
        "description": "An client that is authorized to communicate with the RADIUS service",
        "properties": {
          "id": {
            "type": "string",
            "example": "192.0.2.1",
            "description": "An IP address or subnet (cidr format) that uniquely identifies the RADIUS client"
          },
          "freeradiusClientShortname": {
            "type": "string",
            "example": "my-test-client",
            "description": "A friendly name that will be shown in logs"
          },
          "freeradiusClientType": {
            "type": "string",
            "description": "What the RADIUS client is (type/make/model)",
            "example": "myFirstNAS"
          },
          "freeradiusClientComment": {
            "type": "string",
            "description": "A humanly readable comment associated with the client",
            "example": "This RADIUS client authenticates all subscriber in the foo region of bar"
          },
          "radiusClientSecret": {
            "type": "string",
            "example": "testing123",
            "description": "The shared secret (pre-shared-key) the RADIUS client will use to communicate with the RADIUS service",
            "format": "password"
          },
          "radiusClientRequireMa": {
            "type": "boolean",
            "description": "Whether we requires the Message-Authenticator attribute in Access-Requests from this client"
          }
        },
        "required": [
          "id"
        ]
      },
      "accessDevice": {
        "title": "accessDevice",
        "type": "object",
        "description": "An accessDevice known to the RADIUS service",
        "x-stoplight": {
          "id": "ba9992bc8d39a"
        },
        "properties": {
          "id": {
            "type": "string",
            "example": "192.0.2.1",
            "description": "An IP address or subnet (cidr format) that uniquely identifies the RADIUS client"
          },
          "freeradiusaAccessDeviceShortname": {
            "type": "string",
            "example": "my-test-client",
            "description": "A friendly name that will be shown in logs"
          },
          "freeradiusAccessDeviceType": {
            "type": "string",
            "description": "What the RADIUS client is (type/make/model)",
            "example": "myFirstNAS"
          },
          "freeradiusAccessDeviceComment": {
            "type": "string",
            "description": "A humanly readable comment associated with the client",
            "example": "This RADIUS client authenticates all subscriber in the foo region of bar"
          }
        },
        "required": [
          "id"
        ]
      },
      "clientGroup": {
        "type": "object",
        "title": "clientGroup",
        "x-stoplight": {
          "id": "5b9nnqawh4d41"
        },
        "description": "A method of binding subscriber to a particular group of RADIUS clients",
        "deprecated": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the clientGroup",
            "example": "group1"
          }
        },
        "required": [
          "id"
        ]
      },
      "service": {
        "title": "service",
        "x-stoplight": {
          "id": "ly2966j1k5o5v"
        },
        "type": "object",
        "description": "ISPs and carriers often provide multiple services for their subscribers.  In addition to fixed line boardband, ISPs or carriers may provide VoIP, metro wireless or cellular data.\n\nA service object contains one or more serviceProfiles for a given service.  Each serviceProfile describes a different class-of-service a subscriber cam receive.  Common differentiations between serviceProfiles are upload/download speed restrictions, permitted hours of service, and permitted data transfer quotas.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Globally unique identifier for a service"
          },
          "portBinding": {
            "type": "boolean",
            "description": "The default port binding state for any subscriber which uses this serviceProfile"
          },
          "generateCDR": {
            "type": "boolean",
            "description": "Generate Call Data Records for subscriber which use this subscriberProfile"
          },
          "allowSuspension": {
            "type": "boolean",
            "description": "Allow suspension for subscriber that use this serviceProfile.  If false, subscriber will be entirely disabled"
          }
        },
        "required": [
          "id"
        ]
      },
      "serviceProfile": {
        "title": "serviceProfile",
        "x-stoplight": {
          "id": "kprv79ox656ep"
        },
        "type": "object",
        "description": "An abstract definition of a class-of-service a subscriber would receive.  This object holds non-FreeRADIUS attributes which control how a subscriber is authorized/authenticated, and enables/disables additional logic that runs as the subscriber's request is processed.\n\nThis object contains multiple freeradiusPolicy objects (as children) which are the concrete implementation of the serviceProfile.  These freeradiusPolicy objects are indexed by clientGroup and describe how to implement a given serviceProfile for a type of client.",
        "properties": {
          "id": {
            "type": "string",
            "example": "INET1M",
            "description": "Identifier for the serviceProfile"
          },
          "portBinding": {
            "type": "boolean",
            "description": "The default port binding state for any subscriber which uses this serviceProfile"
          },
          "generateCDR": {
            "type": "boolean",
            "description": "Generate Call Data Records for subscriber which use this subscriber-profile"
          },
          "allowSuspension": {
            "type": "boolean",
            "description": "Allow suspension for subscriber that use this serviceProfile.  If false, subscriber will be entirely disabled"
          }
        },
        "required": [
          "id"
        ]
      },
      "freeradusPolicy": {
        "title": "freeradiusPolicy",
        "x-stoplight": {
          "id": "ebjv3rkkgvqou"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "description": "A set of FreeRADIUS attributes and assigment rules which modify attributes in the current request.  A freeradiusPolicy is can be a \"concrete\" implementation of a serviceProfile.  freeradiusPolicies may also be assigned to individual subscribers or subscriberGroups.\n\nNote: The attributes listed in the definition of the object are a subset of the attributes available.\n\nAny attribute that's available in the relevant LDAP schema (freeradius-radius.schema, freeradius-dhcpv4.schema, freeradius-dhcpv6.schema, etc...) for the protocol, can be included in POST, PATCH, PUT actions, including generic attributes such as `radiusAttribute`.  Generic attributes take the format `<attribute> <op> <quote><value><quote>` e.g. `Reply-Message := \"Welcome user %{User-Name}\"`, and can be used to add any attribute allowed in the protocol dictionary.",
        "examples": [
          {
            "id": "alcatel7750",
            "radiusAttribute": "reply.Vendor-Specific.Nokia-SR.Subsc-ID-Str = \"%{User-Name}@example.org\""
          }
        ]
      },
      "portQinQ": {
        "title": "portQinQ",
        "x-stoplight": {
          "id": "fca8d7c555fbe"
        },
        "type": "object",
        "description": "A representation of a QinQ SVLAN/CVLAN virtual port",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "qinq"
            ],
            "pattern": "^qinq$",
            "example": "qinq"
          },
          "id": {
            "type": "string",
            "description": "A combination of svlan+cvlan used to create the RDN for this port."
          },
          "svlan": {
            "type": "integer",
            "maximum": 4096,
            "example": 100,
            "minimum": 0,
            "description": "QinQ svlan tag"
          },
          "cvlan": {
            "type": "integer",
            "maximum": 4096,
            "minimum": 0,
            "description": "QinQ ctag value"
          },
          "remoteAssociation": {
            "format": "uri",
            "description": "A reference to a client, accessDevice, or subscriber, that exchanges traffic with the specified cvlan and svlan",
            "type": "string",
            "example": "http://example.com/accessDevices/olt1"
          }
        }
      },
      "portPhysical": {
        "title": "portPhysical",
        "type": "object",
        "description": "A representation of a QinQ SVLAN/CVLAN virtual port",
        "x-stoplight": {
          "id": "c02278ad36343"
        },
        "properties": {
          "type": {
            "type": "string",
            "pattern": "^physical$",
            "example": "physical",
            "description": "Port type, must be 'physical'",
            "enum": [
              "physical"
            ]
          },
          "id": {
            "type": "string",
            "example": "2/1/1",
            "description": "Identifier for the physical port"
          },
          "remoteAssociation": {
            "type": "string",
            "format": "uri",
            "description": "A reference to an accessDevice, client or subscriber, that this port connects to.",
            "example": "http://example.com/realms/example.com/subscriber/123456"
          }
        }
      }
    },
    "parameters": {
      "serviceId": {
        "name": "serviceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "fixedLine"
        },
        "description": "Identifier for a service profile category (maps to a service)"
      },
      "clientId": {
        "name": "clientId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier for a client (an IPv4/v6 address or prefix)"
      },
      "clientGroupId": {
        "name": "clientGroupId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "myFirstNas"
        },
        "description": "Identifier for a concrete class of service profile"
      },
      "realmId": {
        "name": "realmId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "example.org"
        },
        "description": "Realm this operation relates to"
      },
      "compoundSubscriberId": {
        "name": "compoundSubscriberId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "123456789+fixedLine"
        },
        "description": "A combination of the subscriber's unique id and the service the account relates to"
      },
      "profileId": {
        "name": "profileId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "INETG1M"
        },
        "description": "Identifier for an abstract class of service profile"
      },
      "subscriberGroupId": {
        "name": "subscriberGroupId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Identifier for a group of subscribers"
      },
      "prune": {
        "name": "prune",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        },
        "description": "If true, delete any child objects, e.g. all the subscriber in a realm"
      },
      "accessDeviceId": {
        "name": "accessDeviceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier for a an accessDevice"
      },
      "portId": {
        "name": "portId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier for a port, within a client or accessDevice"
      }
    },
    "responses": {
      "onCreate": {
        "description": "Response on creating a new object",
        "content": {
          "application/json": {
            "schema": {}
          }
        },
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "The URI of the resource that was just created"
          }
        }
      },
      "onInternalServerError": {
        "description": "An internal error has occurred while talking to one of the backend (LDAP or Postgres). For instance, an attribute was missing when creating an object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_msg": {
                  "type": "string",
                  "description": "Raw error string from the service element which experienced the error"
                }
              }
            }
          }
        }
      },
      "onSuccess": {
        "description": "Response sent on a successful operation which did not create an object",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onNotFound": {
        "description": "Specified resource not found",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onConflict": {
        "description": "The requested operation conflicts with an existing resource (for instance, trying to create a duplicate resource) or you are trying to delete a node that has children",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onNotAllowed": {
        "description": "The requested operation is not allowed for the given resource",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "onBadRequest": {
        "description": "Can be any of the following:\n- The requested path doesn’t correspond to the schema.\n- Missing or invalid data for POST or PUT operations. Data should always be valid JSON.\n- If data contains URL to another resource, the host part of the URL must be identical to the host data being created/modified.\n",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      }
    },
    "securitySchemes": {},
    "examples": {}
  },
  "tags": [
    {
      "name": "Abstract profile (serviceProfile) management",
      "description": "Endpoints for managing service definitions, i.e. speed tiers or bandwidth caps."
    },
    {
      "name": "accessDevice management",
      "description": "Endpoints for managing accessDevices.  Network elements with policies associated that do not communicate directly with the RADIUS service."
    },
    {
      "name": "Client group management",
      "description": "Endpoints for managing groups or categories of client."
    },
    {
      "name": "Client management",
      "description": "Endpoints for managing clients.  Network elements that communicate directly with the service."
    },
    {
      "name": "Concrete profile (freeradiusProfile) management",
      "description": "Endpoints for managing concrete profiles, i.e. sets of attributes which will be returned to the NAS."
    },
    {
      "name": "Realm management",
      "description": "Endpoints for managing realms.  Groups of subscribers based on virtual service."
    },
    {
      "name": "Service management",
      "description": "Endpoints for managing broad categories of service, i.e. 'GPON', 'Wireless802.11', ADSL..."
    },
    {
      "name": "Subscriber group management",
      "description": "Endpoints for managing groups of subscribers."
    },
    {
      "name": "Subscriber management",
      "description": "Endpoints for managing subscribers."
    }
  ]
}